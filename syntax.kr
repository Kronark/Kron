# KRON syntax playground




# PRIMITIVE DATATYPES


# integers
# number signifies bits in memory
# --> size: bit number in variable datatype
# range dependant on unsigned keyword presence
# --> int8 from 0 to 255 or -128 to 127
# --> int16 from 0 to 65535 or −32768 to 32767
# --> int32 from 0 to 4294967296 or −2147483648 to 2147483647
# --> int64 from 0 to 18446744073709552000 or −9223372036854775808 to 9223372036854775807

int8 i = -120;
unsigned int8 iu = 240;
int16 i2 = 16427;
int32 i3 = 427000000;
int64 i4 = 427220217500000;


# floating point numbers / decimals
# number signifies bits in memory
# --> size: bit number in variable datatype
# floating point number calculated via >> mantissa * 2 ^ exponent <<
# --> float16: sign bit + 5 exponent bits + 10 mantissa bits
# --> float32: sign bit + 8 exponent bits + 23 mantissa bits
# --> float64: sign bit + 11 exponent bits + 52 mantissa bits

float16 f = 0.427;
float32 f2 = 12.572837;
float64 f3 = 427.7381468239191463;


# complex numbers
# number signifies bits in memory
# consist of two floats for real and imaginary part
# --> complex32: two float16 numbers
# --> complex64: two float32 numbers
# --> complex128: two float64 numbers

complex32 c = 34 + 43i;
complex64 c2 = -42 + 562.5i;
complex128 c3 = 234.87653 - 234567.98i;


# characters
# number signifies bits in memory
# --> char8: utf8 characters
# --> char16: utf16 characters

char8 ch = 'h';
char16 ch2 = '⻤';


# booleans
# stored as either 0 or 1

bool b = True;
bool b2 = False;




# HIGHER DATATYPES


# lists
# a collection of any datatype, specific datatype can be specified via <...>
# indcies are 0-based
# size: content + index (maybe)
# methods:
# --> min() to get the minimum of the list; only works if single datatype; returns element
# --> max() to get the maximum of the list; only works if single datatype; returns element
# --> index() to get the index of a specified element; returns int64
# --> contains() to check if a certain element exists in the list; returns bool
# --> length() to get the length of the list (1-based); returns int64
# --> push() to add an element; default is append, insert if index specified; returns nothing
# --> pop() to remove an element; default is from end, specific indec if specified; returns nothing
# --> combine() to combine two lists to one; returns list instance

list l1 = [f3, iu, int8 i5 = 112];
string l1_min = l1.min();           # ERROR: min() and max() only work for list instances with a specified datatype
list<int8> l2 = [5, 4, 3, 6, 7];
int8 l2_max = l2.max();             # l2_max = 7
bool l2_cont = l2.contains(4);      # l2_cont = False
int64 l2_ind = l2.index(3);         # get first index of element = 3 --> l2_ind = 2
l2[l2_ind] = 5;                     # replace value at index 2 with value 5

# maps

# strings

# tables




# OTHER CORE FUNCTIONS


# imports
# purely URL based
# --> packages are imported via URL and cached on first use
# --> other local resources are imported via filepath
# explicit permissions can be added if necessary

import "...";
import "..." grant-file-access;


# visibility
# --> export: visible to imports
# otherwise "invisible" or private per default
# --> can be made visible to certain urls via parameters

export int8 age = 22;                       # visible to other files
unsigned int16 year = 2021;                 # invisible outside of file
string math-module = "www.kronark.net/kron/math";     # can also be a list of urls / filepaths
export<math-module> float16 light_level = 0.9996;     # visible to specific module


# printing

