# KRON syntax playground




# PRIMITIVE DATATYPES


# integers
# https://llvm.org/docs/LangRef.html#integer-type
# number signifies bits in memory
# --> size: bit number in variable datatype
# range dependant on unsigned keyword presence
# --> int1 either 0 or 1
# --> int2 from 0 to 4 or -2 to 1
# --> int4 from 0 to 16 or -8 to 7
# --> int8 from 0 to 255 or -128 to 127
# --> int16 from 0 to 65535 or −32768 to 32767
# --> int24 from 0 to 16777216 or -8388608 to 8388607
# --> int32 from 0 to 4294967296 or −2147483648 to 2147483647
# --> int40 from 0 to 1099511627776 or -549755813888 to 549755813887
# --> int48 from 0 to 281474976710656 or -140737488355328 to 140737488355327
# --> int56 from 0 to 72057594037927940 or -36028797018963970 to 36028797018963969
# --> int64 from 0 to 18446744073709552000 or −9223372036854775808 to 9223372036854775807
# --> int72 from 0 to 4722366482869640000000 or -2361183241434820000000 to 2361183241434819999999
# --> int80 from 0 to 1208925819614630000000000 or -604462909807315000000000 to 604462909807314999999999

unsigned int1 bit = 0;   # ERROR: int1 datatypes can not be unsigned.
int8 i = -120;
unsigned int8 iu = 240;
int16 i2 = 16427;
int32 i3 = 427000000;
unsigned int40 i4 = 1099511627776;
int64 i5 = 427220217500000;
int80 i8 = 99999999999999999999999999;   # ERROR: i8 value to high. The signed maximum is 604462909807314999999999.


# floating point numbers / decimals
# https://llvm.org/docs/LangRef.html#floating-point-types
# number signifies bits in memory
# --> size: bit number in variable datatype
# floating point number calculated via >> mantissa * 2 ^ exponent <<
# --> float16: sign bit + 5 exponent bits + 10 mantissa bits
# --> float32: sign bit + 8 exponent bits + 23 mantissa bits
# --> float64: sign bit + 11 exponent bits + 52 mantissa bits

float16 f1 = 0.427;
float32 f2 = 12.572837;
float64 f3 = 427.7381468239191463;


# complex numbers
# https://llvm.org/docs/LangRef.html#vector-type
# number signifies bits in memory
# consist of two floats for real and imaginary part
# --> complex32: two float16 numbers
# --> complex64: two float32 numbers
# --> complex128: two float64 numbers

complex32 c = 34 + 43i;
complex64 c2 = -42 + 562.5i;
complex128 c3 = 234.87653 - 234567.98i;


# characters
# https://llvm.org/docs/LangRef.html#integer-type
# --> stored as an 8-bit or 16-bit integer which is used to get a constant
# number signifies bits in memory
# --> char8: utf8 characters
# --> char16: utf16 characters

char8 ch = 'h';
char16 ch2 = '⻤';


# booleans
# https://llvm.org/docs/LangRef.html#integer-type
# stored as either 0 or 1 single-bit integers
# but assigned via and printed as "True" and "False"
# --> True: 1
# --> False: 0

bool b = True;
bool b2 = False;


# colours
# https://llvm.org/docs/LangRef.html#array-type --> if rgb(), hsl(), hsv(), cmyk() or #RRGGBB is used
# https://llvm.org/docs/LangRef.html#structure-type --> if rgba(...), hsla(...) or #RRGGBBAA is used
# https://llvm.org/docs/LangRef.html#integer-type
# internally either a fixed length array of three 8- or 16-bit integers
# or a fixed length structure type of three 8- or 16-bit integers and a float16 alpha value
# --> allowed number ranges are different based on definition type!
# number signifies bits in memory
# --> col8: 8-bit colour
# --> col16: 16-bit colour
# can be assigned via rgb(), rgba(), hsl(), hsla(), hsv(), cmyk() or hex code (#RRGGBB or #RRGGBBAA)
# alpha channel / bytes added based on assignment used

col8 red = rgb(255, 0, 0)
col16 red = rgb(65535, 0, 0)
col8 blue = #0000FF
col8 green = hsl(120, 100, 50)
col8 green_alpha = hsla(120, 100, 50, 0.55)
col8 purple_alpha = rgba(149, 69, 255, 0.6)
col8 err_hsv = hsv(120, 100, 50, 0.5)       # ERROR: illegal argument --> hsv() and cmyk() do not support transparent colours
col8 err_hsla = hsla(187, 110, 50, 0.69)    # ERROR: saturation value is a percentage and can not be higher than 100




# HIGHER DATATYPES


# lists
# https://llvm.org/docs/LangRef.html#array-type --> if single datatype
# https://llvm.org/docs/LangRef.html#structure-type --> if different values
# a collection of any datatype, specific datatype can be specified via <...>
# indicies are 0-based
# multi-dimensionality is supported
# size: content + index (maybe)
# methods:
# --> min() to get the minimum of the list; only works if single datatype; returns element
# --> max() to get the maximum of the list; only works if single datatype; returns element
# --> index() to get the index of a specified element; returns int64
# --> contains() to check if a certain element exists in the list; returns bool
# --> length() to get the length of the list (1-based); returns int64
# --> add() to add an element or a list of elements; default is append, insert if index specified; returns nothing
# --> del() to remove an element or a list of elements; default is from end, specific index if specified; returns nothing

list l1 = [f3, iu, int8 i5 = 112];
string l1_min = l1.min();           # ERROR: min() and max() only work for list instances with a specified datatype
list<int8> l2 = [5, 4, 3, 6, 7];
int8 l2_max = l2.max();             # l2_max = 7
bool l2_cont = l2.contains(4);      # l2_cont = False
int64 l2_ind = l2.index(3);         # get first index of element = 3 --> l2_ind = 2
int72 l2_ind = l2.index(3);         # int64 return value is converted to int72 datatype
int32 l2_ind = l2.index(3);         # int64 return value is converted to int32 datatype if possible
int1 l2_ind = l2.index(3);          # ERROR: return value of index() is to large to be stored in given datatype int1
l2[l2_ind] = 5;                     # replace value at index 2 with value 5
list l3 = l1.add(l2);               # l3 is structure-type containing the contents of l1 and then l2
l3.del([11, 22, 3, 4]);             # only deletes found values from l3, skips missing values without error


# maps


# strings
# https://llvm.org/docs/LangRef.html#array-type
# --> array of characters i.e. array of integers, either 8-bit or 16-bit
# --> 16-bit integers as soon as a single char16 is added


# tables




# OTHER CORE FUNCTIONS


# imports
# purely URL based
# --> packages are imported via URL and cached on first use
# --> other local resources are imported via filepath
# explicit permissions can be added if necessary

import "...";
import "..." -file-access;      # or -fa shorthand


# visibility
# --> export: visible to imports
# otherwise "invisible" or private per default
# --> can be made visible to certain urls via parameters

export int8 age = 22;                       # visible to other files
unsigned int16 year = 2021;                 # invisible outside of file
string math-module = "www.kronark.net/kron/math";     # can also be a list of urls / filepaths
export<math-module> float16 light_level = 0.9996;     # visible to specific module


# printing

